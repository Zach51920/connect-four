package views

import (
    "github.com/Zach51920/connect-four/internal/connectfour"
    "fmt"
)

templ ConnectFourBoard(game *connectfour.Game, board connectfour.Board) {
    <script src="/public/scripts/board_sse.js"></script>
    <link rel="stylesheet" href="/public/styles/board.css">
    <link rel="stylesheet" href="/public/styles/glow-button.css">
    <div id="board" class="w-full max-w-lg mx-auto">
        <div id="dropzone-container">
            @dropZone(game, board)
        </div>
        <div class="card bg-sky-600 shadow-2xl p-3 md:p-4 rounded-xl">
            <div class="grid grid-cols-7 gap-2 md:gap-3">
                for i, row := range board.Cells {
                    for j, cell := range row {
                        <div class="aspect-square bg-gradient-to-br border border-sky-700 from-sky-600 to-sky-700 rounded-full shadow-inner">
                            if cell == 'O' {
                                <div class="w-full h-full bg-yellow-500 rounded-full shadow-lg">
                                    if !game.InProgress() && board.IsWinningCell(i, j) {
                                        <div class="w-full h-full bg-yellow-500 rounded-full glow-circle"></div>
                                    }
                                </div>
                            } else if cell == 'X' {
                                <div class="w-full h-full bg-red-500 rounded-full shadow-lg">
                                    if !game.InProgress() && board.IsWinningCell(i, j) {
                                        <div class="w-full h-full bg-red-500 rounded-full glow-circle"></div>
                                    }
                                </div>
                            } else {
                                <div class="w-full h-full rounded-full opacity-30 transition-all duration-300 hover:opacity-50"></div>
                            }
                        </div>
                    }
                }
            </div>
        </div>
        <div id="playcontrols-container">
            @playControls(game)
        </div>
    </div>
}

templ dropZone(game *connectfour.Game, board connectfour.Board) {
    if game.HasHuman() && game.InProgress() {
        <div class="grid grid-cols-7 gap-1 md:gap-2 mb-2">
            for col := range board.NumCols() {
                <div class="flex justify-center items-center">
                    if game.ExpectHumanInput() && !board.IsColumnFull(col) {
                         <button
                            hx-trigger="click"
                            hx-target=""
                            hx-post="/game/move"
                            hx-vals={ fmt.Sprintf(`{"column": "%v"}`, col) }
                            hx-headers='{"Content-Type": "application/json"}'
                            class="text-2xl md:text-3xl text-sky-500 hover:animate-bounce transition-all duration-500"
                            >▼</button>
                    } else {
                         <button class="text-2xl md:text-3xl text-sky-500/50 btn-disabled">▼</button>
                    }
                </div>
            }
        </div>
    }
}

templ playControls(game *connectfour.Game) {
    if !game.HasHuman() {
        @botGameControls(game)
    }

    <div class="flex flex-col sm:flex-row justify-center items-center space-y-4 sm:space-y-0 sm:space-x-4 mt-6">
        @glowButtonGet("", refreshIcon(), "/game", "#root", "click")
        @glowButtonGet("Home", homeIcon(), "/", "#root", "click")
        @glowButtonPost("Restart", restartIcon(), "/game/restart", "", "click")
    </div>
}

templ botGameControls(game *connectfour.Game) {
    if game.State == connectfour.GameStateNew || game.State == connectfour.GameStateStopped {
        <div class="w-full mt-6">
            @glowButtonPost("Start", playIcon(), "/game/move", "", "click")
        </div>
    } else if game.InProgress() {
        <div class="w-full mt-6">
            @glowButtonPost("Stop", stopIcon(), "/game/stop", "", "click")
        </div>
    }
}

templ refreshIcon() {
    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
    </svg>
}

templ homeIcon() {
    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
    </svg>
}

templ restartIcon() {
    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728A9 9 0 015.636 5.636m12.728 12.728L5.636 5.636" />
    </svg>
}

templ playIcon() {
    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 3l14 9-14 9V3z" />
    </svg>
}

templ stopIcon() {
    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <rect x="4" y="4" width="16" height="16" rx="2" ry="2" stroke-width="2" />
    </svg>
}
