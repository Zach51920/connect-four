package views

import (
    "fmt"
)

templ Root() {
    <!DOCTYPE html>
    <html lang="en" data-theme="business">
        <head>
            <title>Connect 4</title>
            <meta charset="UTF-8"/>
            <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
            <link href="https://cdn.jsdelivr.net/npm/daisyui@4.12.10/dist/full.min.css" rel="stylesheet" type="text/css" />
            <script src="https://cdn.tailwindcss.com"></script>
            <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css"/>
            <script src="https://unpkg.com/htmx.org/dist/ext/sse.js"></script>
            <script src="https://unpkg.com/htmx.org@2.0.2" defer></script>
            <script>
                function getPreferredTheme() {
                    if (localStorage.getItem("theme")) {
                        return localStorage.getItem("theme");
                    }
                    return window.matchMedia("(prefers-color-scheme: dark)").matches ? "business" : "corperate";
                }

                function setTheme(theme) {
                    document.documentElement.setAttribute("data-theme", theme);
                    document.body.setAttribute("data-theme", theme);
                    localStorage.setItem("theme", theme);
                }

                function toggleTheme() {
                    const currentTheme = document.documentElement.getAttribute("data-theme");
                    const newTheme = currentTheme === "corporate" ? "business" : "corporate";
                    setTheme(newTheme);
                }

                // Set the initial theme when the page loads
                document.addEventListener("DOMContentLoaded", function () {
                    setTheme(getPreferredTheme());

                    // Update the checkbox state based on the current theme
                    const themeToggle = document.querySelector(".theme-controller");
                    if (themeToggle) {
                        themeToggle.checked = getPreferredTheme() === "corporate";
                    }
                });

                // Listen for changes in color scheme preference
                window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change", (e) => {
                    if (!localStorage.getItem("theme")) {
                        setTheme(e.matches ? "business" : "corporate");
                    }
                });
            </script>
        </head>
        <body id="root" data-theme="business">
            <div id="root" class="h-screen bg-c4-base-100">
                <div class="container mx-auto p-4">
                    { children... }
                </div>
                @themeController()
            </div>
        </body>
    </html>
}

templ Home() {
    @Root() {
        <div class="flex flex-col items-center justify-center min-h-screen">
            <h1 class="text-5xl font-bold text-primary mb-8 text-center">CONNECT 4</h1>
            <p class="text-xl text-my-secondary mb-8 text-center max-w-2xl">Choose your game mode and connect to victory!</p>
            <div class="flex flex-col sm:flex-row space-y-4 sm:space-y-0 sm:space-x-4">
                @createGameButton("PvP", "LOCAL", pvpIcon())
                @createGameButton("Player VS. Bot", "BOT", playerVsBotIcon())
                @createGameButton("Bot VS. Bot", "BOT_ONLY", botVsBotIcon())
            </div>
        </div>
    }
}

templ createGameButton(text, gametype string, icon templ.Component) {
    <button
        class="btn btn-lg bg-secondary text-white hover:bg-secondary-focus transition-colors duration-300 flex items-center justify-center space-x-2 px-6 py-3 rounded-full shadow-lg"
        hx-trigger="click"
        hx-target="#root"
        hx-post="/game"
        hx-vals={ fmt.Sprintf(`{"game_type": "%v"}`, gametype) }
    >
        @icon
        <span>{ text }</span>
    </button>
}

templ pvpIcon() {
    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z" />
    </svg>
}

templ playerVsBotIcon() {
    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 10l-2 1m0 0l-2-1m2 1v2.5M20 7l-2 1m2-1l-2 1m2-1v2.5M14 4l-2-1-2 1M4 7l2-1M4 7l2 1M4 7v2.5M12 21l-2-1m2 1l2-1m-2 1v-2.5M6 18l-2-1v-2.5M18 18l2-1v-2.5" />
    </svg>
}

templ botVsBotIcon() {
    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 3v2m6-2v2M9 19v2m6-2v2M5 9H3m2 6H3m18-6h-2m2 6h-2M7 19h10a2 2 0 002-2V7a2 2 0 00-2-2H7a2 2 0 00-2 2v10a2 2 0 002 2zM9 9h6v6H9V9z" />
    </svg>
}


templ themeController() {
    <label class="swap swap-rotate">
      <input type="checkbox" onChange="toggleTheme()" class="theme-controller" />
      <svg
        class="swap-on h-10 w-10 fill-current"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24">
        <path d="M5.64,17l-.71.71a1,1,0,0,0,0,1.41,1,1,0,0,0,1.41,0l.71-.71A1,1,0,0,0,5.64,17ZM5,12a1,1,0,0,0-1-1H3a1,1,0,0,0,0,2H4A1,1,0,0,0,5,12Zm7-7a1,1,0,0,0,1-1V3a1,1,0,0,0-2,0V4A1,1,0,0,0,12,5ZM5.64,7.05a1,1,0,0,0,.7.29,1,1,0,0,0,.71-.29,1,1,0,0,0,0-1.41l-.71-.71A1,1,0,0,0,4.93,6.34Zm12,.29a1,1,0,0,0,.7-.29l.71-.71a1,1,0,1,0-1.41-1.41L17,5.64a1,1,0,0,0,0,1.41A1,1,0,0,0,17.66,7.34ZM21,11H20a1,1,0,0,0,0,2h1a1,1,0,0,0,0-2Zm-9,8a1,1,0,0,0-1,1v1a1,1,0,0,0,2,0V20A1,1,0,0,0,12,19ZM18.36,17A1,1,0,0,0,17,18.36l.71.71a1,1,0,0,0,1.41,0,1,1,0,0,0,0-1.41ZM12,6.5A5.5,5.5,0,1,0,17.5,12,5.51,5.51,0,0,0,12,6.5Zm0,9A3.5,3.5,0,1,1,15.5,12,3.5,3.5,0,0,1,12,15.5Z" />
      </svg>
      <svg
        class="swap-off h-10 w-10 fill-current"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24">
        <path d="M21.64,13a1,1,0,0,0-1.05-.14,8.05,8.05,0,0,1-3.37.73A8.15,8.15,0,0,1,9.08,5.49a8.59,8.59,0,0,1,.25-2A1,1,0,0,0,8,2.36,10.14,10.14,0,1,0,22,14.05,1,1,0,0,0,21.64,13Zm-9.5,6.69A8.14,8.14,0,0,1,7.08,5.22v.27A10.15,10.15,0,0,0,17.22,15.63a9.79,9.79,0,0,0,2.1-.22A8.11,8.11,0,0,1,12.14,19.73Z" />
      </svg>
    </label>
    <style>
        html, body {
            transition: background-color 0.3s ease, color 0.3s ease;
        }
        *, *::before, *::after {
            transition: background-color 0.3s ease, border-color 0.3s ease, color 0.3s ease;
        }
    </style>
}